# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# We maintain multiple TestFlight apps for different target users.
# `identity_example` - demonstrates capabilities of IdentityVerificationSheet
#
# You must invoke fastlane with the scp_app:X parameter which maps to one
# of the apps so we know which to build.
APPS = {
  "identity_example" => {
    "project" => "./Example/IdentityVerification Example.xcodeproj",
    "identifier" => "com.stripe.example.IdentityVerification-Example",
    "scheme" => "IdentityVerification Example",
    "tag_postfix" => "identity_example",
  }
}


default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(workspace: "Stripe.xcworkspace", scheme: "LocalizationTester")
  end

  lane :all_ci do
    ci_builds
    main_tests
    ui_apps_analyze_tests
    install_tests
    integration_tests
    linting_tests
    legacy_tests_11
    legacy_tests_12
  end

  lane :ui_apps_analyze_tests do
    ui_tests
    builds
    analyze
  end

  lane :linting_tests do
    preflight
    check_docs
  end

  lane :install_tests do
    install_cocoapods_without_frameworks_objc
    installation_cocoapods_frameworks_objc
    installation_cocoapods_frameworks_swift
    installation_carthage
    installation_spm
  end

  lane :preflight do
    Dir.chdir("..") do
      sh("./ci_scripts/check_version.rb")
      sh("./ci_scripts/check_for_new_localized_strings.sh")
    end
  end

  lane :ci_builds do
    Dir.chdir("..") do
      sh("./ci_scripts/ci_builds.sh")
    end
  end

  lane :main_tests do
    Dir.chdir("..") do
      sh("./ci_scripts/run_tests.sh")
    end
  end

  lane :integration_tests do
    Dir.chdir("..") do
      sh("./ci_scripts/run_integration_tests.sh")
    end
  end

  lane :ui_tests do
    Dir.chdir("..") do
      sh("./ci_scripts/run_ui_tests.sh")
    end
  end

  lane :legacy_tests_11 do
    Dir.chdir("..") do
      sh("./ci_scripts/run_legacy_tests.sh \"platform=iOS Simulator,name=iPhone 6,OS=11.4\"")
    end
  end

  lane :legacy_tests_12 do
    Dir.chdir("..") do
      sh("./ci_scripts/run_legacy_tests.sh \"platform=iOS Simulator,name=iPhone 6,OS=12.4\"")
    end
  end

  lane :e2e_only do
    Dir.chdir("..") do
      sh("./ci_scripts/e2e_test.sh")
    end
  end

  lane :analyze do
    Dir.chdir("..") do
      sh("./ci_scripts/run_analyzer.sh")
    end
  end

  lane :builds do
    Dir.chdir("..") do
      sh("./ci_scripts/run_builds.sh")
    end
  end

  lane :install_cocoapods_without_frameworks_objc do
    Dir.chdir("..") do
      sh("./Tests/installation_tests/cocoapods/without_frameworks_objc/test.sh")
    end
  end

  lane :installation_cocoapods_frameworks_objc do
    Dir.chdir("..") do
      sh("./Tests/installation_tests/cocoapods/with_frameworks_objc/test.sh")
    end
  end

  lane :installation_cocoapods_frameworks_swift do
    Dir.chdir("..") do
      sh("./Tests/installation_tests/cocoapods/with_frameworks_swift/test.sh")
    end
  end

  lane :installation_carthage do
    Dir.chdir("..") do
      sh("./Tests/installation_tests/carthage/test.sh")
    end
  end

  lane :installation_spm do
    Dir.chdir("..") do
      sh("./Tests/installation_tests/swift_package_manager/test.sh")
    end
  end

  lane :check_docs do
    Dir.chdir("..") do
      sh("./ci_scripts/check_documentation.sh")
    end
  end

  lane :tests do
    run_tests(scheme: "StripeiOS",
      devices: ["iPhone 8"])
  end

  desc "Submit a new build to TestFlight."
  lane :test_flight do |options|
    app = APPS[options[:scp_app]]

    match(app_identifier: app["identifier"])

    echo(message: "")
    echo(message: "üëã ‚ÑπÔ∏è Running push_to_git_remote to ensure push of tags later will succeed")
    echo(message: "If this step fails, you may have local commits on a protected branch.")
    echo(message: "Either get that merged or move to a non-protected branch.")
    echo(message: "")

    push_to_git_remote

    # Before we start committing version bumps, what was the last commit & branch name
    target_commit = last_git_commit
    target_branch = git_branch

    version = get_version_number(xcodeproj: app["project"], target: app["scheme"])
    target_build_number = latest_testflight_build_number(app_identifier: app["identifier"]) + 1

    increment_build_number(
      build_number: target_build_number,
      xcodeproj: app["project"]
    )

    # gym builds, packages, and signs the ipa file
    gym(
      configuration: "Release",
      scheme: app["scheme"],
    )

    # pilot submits the ipa to testflight
    pilot(
      skip_submission: true,
      distribute_external: false,
      skip_waiting_for_build_processing: true
    )

    # Make sure our directory is clean, except for changes Fastlane has made
    clean_build_artifacts

    # We had previously verified we had a clean git status before running fastlane match.
    # Fastlane made the branch dirty, so let's clean up after ourselves here.
    sh("git", "checkout", "--", ".")

    # ex tag: fastlane-tag/store/v1.0/build-39-internal
    add_git_tag(
      grouping: "fastlane-tag",
      prefix: "v#{version}/build-",
      postfix: "-#{app["tag_postfix"]}",
    )

    push_to_git_remote

    # slack(
    #   slack_url: SLACK_URL,
    #   pretext: 'New TestFlight Submission:',
    #   message: "App Store #{app["scheme"]} v#{version} build #{target_build_number}",
    #   channel: '#terminal-intx',
    #   fail_on_error: false,
    #   default_payloads: [
    #   ],
    #   payload: {
    #     'Build Date': Time.new.to_s,
    #     'Submitted by': ENV["USER"],
    #     'Last Git Commit': target_commit[:message],
    #     'Last Commit Hash': target_commit[:abbreviated_commit_hash],
    #     'Branch': target_branch,
    #   }
    # )
  end
end
